<%- include('../partials/head', { 
  title: title,
  includeDemoManager: true,
  includeItemRenderer: true
}) %>
<body<% if (typeof customStyling !== 'undefined' && customStyling) { %> class="<%= customStyling %>"<% } %>>
  <header class="main-header">
    <h1>
      <a class="link" href="/" id="main-title">
        <svg width="200" height="40" viewBox="0 0 200 40" xmlns="http://www.w3.org/2000/svg" aria-label="The Blacklist Logo">
          <!-- Background rectangle -->
          <rect width="200" height="40" fill="#1a1a1a" stroke="#FE0000" stroke-width="2"/>
          
          <!-- Main text "THE BLACKLIST" -->
          <text x="100" y="26" font-family="Arial Black, Arial, Helvetica, sans-serif" font-size="14" font-weight="bold" text-anchor="middle" fill="#FE0000" text-transform="uppercase" letter-spacing="2px">
            THE BLACKLIST
          </text>
          
          <!-- Decorative line -->
          <line x1="20" y1="32" x2="180" y2="32" stroke="#FE0000" stroke-width="1"/>
          
          <!-- Fallback text (hidden by default) -->
          <text x="100" y="26" font-family="Arial Black, Arial, Helvetica, sans-serif" font-size="14" font-weight="bold" text-anchor="middle" fill="#FE0000" style="display: none;">
            THE BLACKLIST
          </text>
        </svg>
        <!-- Fallback text for browsers that don't support SVG -->
        <span class="logo-fallback">THE BLACKLIST</span>
      </a>
    </h1>
    <div class="confidential-stamp">HIGHLY CONFIDENTIAL</div>
  </header>
  
  <!-- Demo Banner -->
  <%- include('../partials/demo-banner') %>
  
  <!-- Reusable List Components -->
  <%- include('../partials/list-components', {
    activeTab: activeTab,
    descriptions: descriptions,
    hideToggleButtons: hideToggleButtons
  }) %>
  
  <div id="spinner">Loading...</div>
  <div class="list-container">
    <div id="dataList" 
         data-original-hx-get="<%= apiEndpoint %>"
         data-original-hx-trigger="load"
         data-original-hx-indicator="#spinner"
         data-htmx-disabled="true">
      <!-- Initial empty content - will be populated by HTMX or demo manager -->
    </div>
  </div>

  <script src="/assets/js/core/index.js"></script>
  
  <script>
    // Create logger for list layout
    const listLogger = window.logManager ? window.logManager.createModuleLogger('ListLayout') : {
      error: console.error,
      warn: console.warn,
      info: console.log,
      debug: console.log,
      verbose: console.log
    };
    
    // Global function to render list data
    window.renderListData = function(data, containerId) {
      listLogger.info('Rendering data for', containerId);
      listLogger.debug('Data received:', data);
      
      if (!data || !Array.isArray(data)) {
        listLogger.error('Invalid data structure - expected array');
        return;
      }
      
      const dataList = document.getElementById(containerId);
      if (!dataList) {
        listLogger.error('Container not found:', containerId);
        return;
      }
      
      // Generate list items HTML
      const listItemsHtml = data.map(item => {
        const status = item.status || 'unknown';
        const name = item.name || 'Unknown';
        const v1 = item.v1 !== undefined ? item.v1 : 'N/A';
        const v2 = item.v2 !== undefined ? item.v2 : 'N/A';
        const category = item.category || 'Unknown';
        
        return `
          <div class="list-item ${status}" onclick="window.location.href='/list/${status}'">
            <div class="item-name">${name}</div>
            <div class="item-status">${status.charAt(0).toUpperCase() + status.slice(1)}</div>
            <div class="item-v1">V1: ${v1}</div>
            <div class="item-v2">V2: ${v2}</div>
            <div class="item-category">${category}</div>
          </div>
        `;
      }).join('');
      
      dataList.innerHTML = `
        <div class="list-items-container">
          ${listItemsHtml}
        </div>
      `;
      
      listLogger.info('Successfully rendered', data.length, 'items');
    };

    // Immediately disable HTMX if network is blocked
    document.addEventListener('DOMContentLoaded', function() {
      // Check if we should disable HTMX (network blocked)
      const dataList = document.getElementById('dataList');
      if (dataList) {
        // Test network connectivity with actual API endpoint
        const apiEndpoint = dataList.getAttribute('data-original-hx-get');
        listLogger.debug('Testing network connectivity to:', apiEndpoint);
        
        // Use a more efficient HEAD request with timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 2000); // 2 second timeout
        
        fetch(apiEndpoint, { 
          method: 'HEAD',
          signal: controller.signal,
          cache: 'no-cache' // Prevent browser caching
        })
          .then(() => {
            clearTimeout(timeoutId);
            listLogger.info('Network available, enabling HTMX');
            // Enable HTMX attributes
            dataList.setAttribute('hx-get', apiEndpoint);
            dataList.setAttribute('hx-trigger', 'load');
            dataList.setAttribute('hx-indicator', '#spinner');
            dataList.removeAttribute('data-htmx-disabled');
            
            // Process the element with HTMX
            if (window.htmx) {
              listLogger.info('List layout: Processing element with HTMX');
              htmx.process(dataList);
              listLogger.info('List layout: Element processed, HTMX attributes:', {
                hxGet: dataList.getAttribute('hx-get'),
                hxTrigger: dataList.getAttribute('hx-trigger'),
                hxIndicator: dataList.getAttribute('hx-indicator')
              });
            }
            
            // Clear any existing demo loading indicators (if any)
            const loadingIndicator = dataList.querySelector('.demo-loading-indicator');
            if (loadingIndicator) {
              loadingIndicator.remove();
            }
            
            // Remove demo banner if it exists
            const demoBanner = document.getElementById('demo-data-banner');
            if (demoBanner) {
              demoBanner.remove();
              document.body.style.paddingTop = '';
              listLogger.info('List layout: Removed demo banner after successful network test');
            }
            
            // Manually trigger HTMX request to load live data
            listLogger.info('List layout: Manually triggering HTMX request for live data');
            listLogger.info('List layout: HTMX attributes before trigger:', {
              hxGet: dataList.getAttribute('hx-get'),
              hxTrigger: dataList.getAttribute('hx-trigger'),
              hxIndicator: dataList.getAttribute('hx-indicator')
            });
            
            try {
              listLogger.info('List layout: HTMX object available:', !!window.htmx);
              listLogger.info('List layout: HTMX version:', window.htmx?.version || 'unknown');
              listLogger.info('List layout: HTMX processing:', window.htmx?.processing || 'unknown');
              
              htmx.trigger(dataList, 'load');
              listLogger.info('List layout: HTMX trigger called successfully');
              
              // Add a timeout to check if HTMX actually processed the request
              setTimeout(() => {
                listLogger.info('List layout: Checking HTMX request status after 2 seconds...');
                const spinner = document.getElementById('spinner');
                const dataListContent = dataList.innerHTML;
                listLogger.info('List layout: Spinner visible:', spinner && !spinner.classList.contains('content-loaded'));
                listLogger.info('List layout: DataList content length:', dataListContent.length);
                listLogger.info('List layout: DataList has demo loading indicator:', dataListContent.includes('demo-loading-indicator'));
                
                // If no HTMX events fired and content is still empty, try manual fetch
                if (dataListContent.length < 100) {
                  listLogger.info('List layout: HTMX request appears to have failed, trying manual fetch');
                  
                  // Try manual fetch as fallback
                  fetch(apiEndpoint)
                    .then(response => {
                      if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                      }
                      return response.json();
                    })
                    .then(data => {
                      listLogger.info('List layout: Manual fetch successful, rendering data');
                      if (window.renderListData && Array.isArray(data)) {
                        window.renderListData(data, 'dataList');
                      }
                    })
                    .catch(error => {
                      listLogger.info('List layout: Manual fetch failed, falling back to demo data:', error.message);
                      if (window.demoManager && !window.demoManager.isDemoMode()) {
                        window.demoManager.enableDemoMode();
                      }
                    });
                }
              }, 2000);
              
            } catch (error) {
              listLogger.error('List layout: HTMX trigger failed:', error);
              // Fallback: load demo data if HTMX fails
              if (window.demoManager && !window.demoManager.isDemoMode()) {
                listLogger.info('List layout: Falling back to demo data due to HTMX trigger failure');
                window.demoManager.enableDemoMode();
              }
            }
          })
          .catch((error) => {
            clearTimeout(timeoutId);
            listLogger.info('List layout: Network blocked, keeping HTMX disabled. Error:', error.message);
            // Keep HTMX disabled and enable demo mode
            if (window.demoManager && !window.demoManager.isDemoMode()) {
              listLogger.info('List layout: Enabling demo mode due to network block');
              window.demoManager.enableDemoMode();
            }
          });
      }
    });

    window.clientDataCache = {
      cache: new Map(),
      maxAge: 5 * 60 * 1000, // 5 minutes
      
      set(key, data) {
        this.cache.set(key, {
          data: data,
          timestamp: Date.now()
        });
        listLogger.info(`Client cache: Stored data for ${key}`);
      },
      
      get(key) {
        const cached = this.cache.get(key);
        if (!cached) return null;
        
        const age = Date.now() - cached.timestamp;
        if (age > this.maxAge) {
          this.cache.delete(key);
          listLogger.info(`Client cache: Expired data for ${key}`);
          return null;
        }
        
        listLogger.info(`Client cache: Hit for ${key}`);
        return cached.data;
      },
      
      has(key) {
        return this.get(key) !== null;
      },
      
      clear() {
        this.cache.clear();
        listLogger.info('Client cache: Cleared all data');
      }
    };

    // Update spinner text using StringSchema when available
    document.addEventListener('DOMContentLoaded', function() {
      // Use requestAnimationFrame for smoother updates
      requestAnimationFrame(function() {
      if (window.StringSchema) {
        // Update main title
        const mainTitle = document.getElementById('main-title');
        if (mainTitle) {
            const newTitle = window.StringSchema.getPageTitle('list');
            if (newTitle !== mainTitle.textContent) {
              mainTitle.textContent = newTitle;
            }
        }

        const spinner = document.getElementById('spinner');
        if (spinner) {
            spinner.textContent = 'Loading...';
        }
        
        const demoButton = document.querySelector('#demo-button-container button');
        if (demoButton) {
          demoButton.textContent = window.StringSchema.getButtonLabel('loadDemo');
        }
      }
      });
      
      // Hide spinner if content is already loaded
      setTimeout(() => {
        const dataList = document.getElementById('dataList');
        if (dataList && dataList.children.length > 0) {
          const spinner = document.getElementById('spinner');
          if (spinner) {
            spinner.classList.add('content-loaded');
            listLogger.info('List layout: Hidden spinner - content already loaded');
          }
          
          // Remove loading state class
          document.body.classList.remove('loading-active');
        }
      }, 100);
    });
    // List page demo data handlers
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize demo manager
      if (typeof initDemoManager === 'function') {
        initDemoManager();
      }
      
        // Listen for demo mode changes
        window.addEventListener('demoModeChanged', function(event) {
          if (event.detail.demoMode && window.demoManager) {
            loadListDemoData();
          }
        });

      // Listen for demo button show event
      window.addEventListener('showDemoButton', function(event) {
        const demoButtonContainer = document.getElementById('demo-button-container');
        if (demoButtonContainer) {
        if (event.detail.show) {
            demoButtonContainer.style.display = 'block';
          showQuotaExceededMessage();
          } else {
            demoButtonContainer.style.display = 'none';
          }
        }
      });

        // Check if demo mode is already enabled and data not already loaded
        if (window.demoManager && window.demoManager.isDemoMode() && !window.demoManager.hasCurrentPageDemoData()) {
          loadListDemoData();
        }
    });

    function loadListDemoData() {
      const currentVersion = '<%= activeTab || "v1" %>';
      const pageId = `list-${currentVersion}`;
      
      // Use dummy data directly instead of making network requests
      listLogger.info(`Demo Manager: Loading dummy data for ${pageId}`);
      
      if (window.demoManager) {
        // Get dummy data from the server's dummy data endpoint
        const dataType = currentVersion === 'v1' ? 'v1' : 
                        currentVersion === 'v2' ? 'v2' : 
                        currentVersion === 'the-blacklist' ? 'v1' : 'v1';
        
        fetch(`/dummy-data/${dataType}`)
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return response.json();
          })
          .then(demoData => {
            listLogger.info(`Demo Manager: Loaded dummy data for ${currentVersion}:`, demoData.length, 'items');
            
            // Render the dummy data
            if (window.renderListData) {
              window.renderListData(demoData, 'dataList');
            }
            
            // Enable demo mode and show banner when demo data is successfully loaded
            if (window.demoManager && !window.demoManager.isDemoMode()) {
              listLogger.info('List page: Enabling demo mode after successful demo data load');
              window.demoManager.enableDemoMode();
            }
          })
          .catch(error => {
            listLogger.error('Demo Manager: Failed to load dummy data:', error);
            // Fallback to empty state
            const dataList = document.getElementById('dataList');
            if (dataList) {
              dataList.innerHTML = '<div class="no-data">Demo data not available</div>';
            }
          });
      }
    }

    // Make render function globally accessible
    window.renderListData = function(data, containerId) {
      const renderStartTime = performance.now();
      
      // Handle both array and object formats
      let items;
      if (Array.isArray(data)) {
        // Check if data is already organized in columns (array of arrays)
        if (data.length > 0 && Array.isArray(data[0])) {
          items = data; // Data is already in column format
        } else {
          items = data; // Data is a flat array
        }
      } else {
        items = data.items || [];
      }
      
      listLogger.info(`Render List Data: Starting progressive render for ${containerId} with ${Array.isArray(items[0]) ? items.reduce((sum, col) => sum + col.length, 0) : items.length} items`);
      
      const container = document.getElementById(containerId);
      if (!container) {
        listLogger.info(`Render List Data: Container ${containerId} not found`);
        return;
      }
      
      if (!items || items.length === 0) {
        listLogger.info(`Render List Data: No items to render for ${containerId}`);
        container.innerHTML = window.QuotaMessageHelper.generateNoData();
        hideSpinner();
        return;
      }
      
      // Check if data is in column format
      const isColumnFormat = Array.isArray(items[0]);
      
      if (isColumnFormat) {
        // Render column-based layout
        renderColumnLayout(items, container, renderStartTime);
      } else {
        // Render flat array layout (legacy)
        renderFlatLayout(items, container, renderStartTime);
      }
    };
    
    function renderColumnLayout(columns, container, renderStartTime) {
      // Clear container first
      container.innerHTML = '';
      
      // Create column containers
      columns.forEach((columnData, columnIndex) => {
        const columnDiv = document.createElement('div');
        columnDiv.className = 'column';
        columnDiv.innerHTML = `<div class="column-items"></div>`;
        
        const columnItemsContainer = columnDiv.querySelector('.column-items');
        
        // Render items in this column
        columnData.forEach((item, itemIndex) => {
          const itemHTML = window.ItemRenderer.renderItem(item, {
            showV1: !window.location.pathname.includes('/v2'),
            showV2: window.location.pathname.includes('/v2'),
            useV2ForNumber: window.location.pathname.includes('/v2'),
            includeLegendWrapper: true
          });
          
          const itemDiv = document.createElement('div');
          itemDiv.innerHTML = itemHTML;
          itemDiv.classList.add('list-item-loading');
          itemDiv.style.animationDelay = `${itemIndex * 0.02}s`; // Stagger animation
          
          columnItemsContainer.appendChild(itemDiv.firstElementChild);
        });
        
        container.appendChild(columnDiv);
      });
      
      // Hide spinner
      setTimeout(() => {
        hideSpinner();
        const renderEndTime = performance.now();
        listLogger.info(`Render List Data: Completed column render for ${containerId} in ${(renderEndTime - renderStartTime).toFixed(2)}ms`);
      }, 300);
    }
    
    function renderFlatLayout(items, container, renderStartTime) {
      // Validate that items have required properties
      const validItems = items.filter(item => item && typeof item === 'object' && item.name);
      if (validItems.length === 0) {
        listLogger.info(`Render List Data: No valid items found for ${containerId}`);
        container.innerHTML = window.QuotaMessageHelper.generateInvalidData();
        hideSpinner();
        return;
      }
      
      listLogger.info(`Render List Data: Rendering ${validItems.length} valid items out of ${items.length} total items`);

      // Clear container first
      container.innerHTML = '';
      
      // Progressive loading: render items in batches
      const batchSize = 25; // Render 25 items at a time
      let currentIndex = 0;
      
      function renderBatch() {
        const endIndex = Math.min(currentIndex + batchSize, validItems.length);
        const batch = validItems.slice(currentIndex, endIndex);
        
        // Update progress
        const progress = Math.round((endIndex / validItems.length) * 100);
        updateProgress(progress, endIndex, validItems.length);
        
        // Render batch
        batch.forEach((item, batchIndex) => {
          const globalIndex = currentIndex + batchIndex;
          
          // Use unified ItemRenderer for consistent rendering
          const itemHTML = window.ItemRenderer.renderItem(item, {
            showV1: !window.location.pathname.includes('/v2'),
            showV2: window.location.pathname.includes('/v2'),
            useV2ForNumber: window.location.pathname.includes('/v2'),
            includeLegendWrapper: true
          });
          
          const itemDiv = document.createElement('div');
          itemDiv.innerHTML = itemHTML;
          itemDiv.classList.add('list-item-loading');
          itemDiv.style.animationDelay = `${batchIndex * 0.03}s`; // Stagger animation
          
          container.appendChild(itemDiv.firstElementChild);
        });
        
        currentIndex = endIndex;
        
        // Continue with next batch or finish
        if (currentIndex < validItems.length) {
          setTimeout(renderBatch, 150); // Small delay between batches
        } else {
          // Finished rendering
          setTimeout(() => {
            hideSpinner();
            const renderEndTime = performance.now();
            listLogger.info(`Render List Data: Completed progressive render for ${containerId} in ${(renderEndTime - renderStartTime).toFixed(2)}ms`);
          }, 300);
        }
      }
      
      // Start progressive rendering
      renderBatch();
    }
    
    function updateProgress(percentage, current, total) {
      // Simple progress update for classic spinner
      const spinner = document.getElementById('spinner');
      if (spinner) {
        spinner.textContent = `Loading... ${current}/${total}`;
      }
    }
    
    function hideSpinner() {
      const spinner = document.getElementById('spinner');
      if (spinner) {
        spinner.classList.add('content-loaded');
        listLogger.info('List layout: Hidden spinner after progressive render');
      }
      
      // Remove loading state class
      document.body.classList.remove('loading-active');
    }
    
    // Function to show quota exceeded message
    function showQuotaExceededMessage() {
      const dataList = document.getElementById('dataList');
      const spinner = document.getElementById('spinner');
      const demoButtonContainer = document.getElementById('demo-button-container');
      
      // Hide loading spinner
      if (spinner) {
        spinner.style.display = 'none';
      }
      
      // Show demo button
      if (demoButtonContainer) {
        demoButtonContainer.style.display = 'block';
      }
      
      if (dataList) {
        dataList.innerHTML = window.QuotaMessageHelper.generateGeneral();
      }
    }
    
    // Manual fallback function (called by button click)
    function loadDummyDataManually() {
      listLogger.info('Manual demo mode activation');
      
      // Show loading state on button
      const button = document.querySelector('#demo-button-container button');
      if (button) {
        window.demoManager.setButtonLoading(button, true);
      }
      
      // Enable demo mode
      window.demoManager.enableDemoMode();
      
      // Hide demo button after a short delay
      setTimeout(() => {
        const demoButtonContainer = document.getElementById('demo-button-container');
        if (demoButtonContainer) {
          demoButtonContainer.style.display = 'none';
        }
      }, 1000);
    }

    // HTMX event handlers for seamless navigation
    document.addEventListener('htmx:beforeRequest', function(event) {
      const url = event.detail.pathInfo.requestPath;
      const cacheKey = url.replace('/', '');
      
      // Check if we have this data cached
      if (window.clientDataCache.has(cacheKey)) {
        listLogger.info(`HTMX: Using cached data for ${cacheKey}, skipping request`);
        event.preventDefault();
        
        // Use cached data to render
        const cachedData = window.clientDataCache.get(cacheKey);
        const dataList = document.getElementById('dataList');
        if (dataList && window.renderListData) {
          window.renderListData(cachedData, 'dataList');
        }
        return;
      }
      
      listLogger.info(`HTMX: Cache miss for ${cacheKey}, proceeding with request`);
    });

    // Listen for successful HTMX requests to detect live data loading
    document.addEventListener('htmx:afterRequest', function(event) {
      listLogger.info('HTMX: afterRequest event:', {
        target: event.detail.target.id,
        path: event.detail.pathInfo.requestPath,
        successful: event.detail.successful,
        status: event.detail.xhr.status,
        responseText: event.detail.xhr.responseText ? event.detail.xhr.responseText.substring(0, 100) + '...' : 'no response'
      });
      
      // Handle JSON responses for dataList
      if (event.detail.successful && event.detail.target.id === 'dataList') {
        const url = event.detail.pathInfo.requestPath;
        const cacheKey = url.replace('/', '');
        
        try {
          const responseData = JSON.parse(event.detail.xhr.responseText);
          listLogger.info(`HTMX: Received JSON data for ${cacheKey}:`, responseData.length || 'object');
          
          // Cache the response data
          window.clientDataCache.set(cacheKey, responseData);
          listLogger.info(`HTMX: Cached response data for ${cacheKey}`);
          
          // Render the data using our render function
          if (window.renderListData && Array.isArray(responseData)) {
            listLogger.info(`HTMX: Rendering ${responseData.length} items for dataList`);
            window.renderListData(responseData, 'dataList');
          }
        } catch (e) {
          listLogger.info(`HTMX: Could not parse JSON response for ${cacheKey}:`, e.message);
        }
      }
      
      // Handle successful requests
      if (event.detail.successful && (event.detail.pathInfo.requestPath.includes('/version1') || event.detail.pathInfo.requestPath.includes('/version2'))) {
        const version = event.detail.pathInfo.requestPath.includes('/version1') ? 'v1' : 'v2';
        listLogger.info(`List page: Live data loaded successfully for ${version}`);
        
        // Remove demo banner if it exists
        const demoBanner = document.getElementById('demo-data-banner');
        if (demoBanner) {
          demoBanner.remove();
          document.body.style.paddingTop = '';
          listLogger.info('List page: Removed demo banner after successful live data load');
        }
        
        // Hide any demo spinners when live data loads
        if (window.spinnerManager) {
          window.spinnerManager.hideDemoSpinner('dataList');
        }
        
        if (window.demoManager) {
          window.demoManager.onLiveDataLoaded(`list-${version}`, 'dataList');
        }
        
        // Hide spinner after successful request
          const spinner = document.getElementById('spinner');
          if (spinner) {
          const startTime = parseInt(spinner.dataset.startTime) || 0;
          const elapsed = Date.now() - startTime;
          const minDisplayTime = 500; // Reduced to 500ms for better UX
          
          if (elapsed < minDisplayTime) {
            setTimeout(() => {
              spinner.classList.add('content-loaded');
              listLogger.info('List layout: Hidden spinner after successful HTMX request (minimum time)');
            }, minDisplayTime - elapsed);
          } else {
            // Hide immediately if minimum time has passed
            spinner.classList.add('content-loaded');
            listLogger.info('List layout: Hidden spinner after successful HTMX request');
          }
        }
        
        document.body.classList.remove('loading-active');
      } else if (!event.detail.successful && event.detail.target.id === 'dataList') {
        // Handle failed requests
        listLogger.info('List page: Live data request failed, keeping demo data');
        
        const spinner = document.getElementById('spinner');
        if (spinner) {
          spinner.classList.add('content-loaded');
        }
        
        document.body.classList.remove('loading-active');
        
        // Show demo mode indicator since we're using demo data
        if (window.demoManager && !window.demoManager.isDemoMode()) {
          listLogger.info('List page: Enabling demo mode due to failed live data request');
          window.demoManager.enableDemoMode();
        }
      }
    });

    // Listen for HTMX requests starting to show spinner
    document.addEventListener('htmx:beforeRequest', function(event) {
      listLogger.info('HTMX: beforeRequest event:', {
        target: event.detail.target.id,
        path: event.detail.pathInfo.requestPath,
        method: event.detail.requestConfig.method
      });
      
      if (event.detail.target.id === 'dataList') {
        listLogger.info('HTMX: Live data request starting, showing spinner');
        
        // Check if HTMX requests are disabled (network blocked)
        const htmxDisabled = document.querySelector('[data-htmx-disabled="true"]');
        if (htmxDisabled) {
          listLogger.info('HTMX: Requests are disabled, aborting and enabling demo mode');
          event.preventDefault();
          
          // Enable demo mode if not already active
          if (window.demoManager && !window.demoManager.isDemoMode()) {
            listLogger.info('HTMX: Enabling demo mode due to disabled requests');
            window.demoManager.enableDemoMode();
          }
          return;
        }
        
        const spinner = document.getElementById('spinner');
        if (spinner) {
          spinner.classList.remove('content-loaded');
          spinner.style.display = 'flex';
          
          // Store start time for minimum display duration
          spinner.dataset.startTime = Date.now();
          
          // Add loading state to body
          document.body.classList.add('loading-active');
        }
      }
    });

    // Hide spinner after HTMX content swap
    document.addEventListener('htmx:afterSwap', function(event) {
      if (event.detail.target.id === 'dataList') {
          const spinner = document.getElementById('spinner');
          if (spinner) {
          const startTime = parseInt(spinner.dataset.startTime) || 0;
          const elapsed = Date.now() - startTime;
          const minDisplayTime = 500; // Reduced to 500ms for better UX
          
          if (elapsed < minDisplayTime) {
            // Wait for minimum display time
            setTimeout(() => {
              spinner.classList.add('content-loaded');
              listLogger.info('List layout: Hidden spinner after HTMX swap (minimum time)');
            }, minDisplayTime - elapsed);
          } else {
            // Hide immediately if minimum time has passed
            spinner.classList.add('content-loaded');
            listLogger.info('List layout: Hidden spinner after HTMX swap');
          }
          }
          
          // Remove loading state class
          document.body.classList.remove('loading-active');
      }
    });

    // Handle HTMX request aborts
    document.addEventListener('htmx:sendAbort', function(event) {
      if (event.detail.target.id === 'dataList') {
        listLogger.info('List page: HTMX request aborted');
        
        const spinner = document.getElementById('spinner');
        if (spinner) {
          spinner.classList.add('content-loaded');
        }
        
        document.body.classList.remove('loading-active');
        
        // Show demo mode indicator since we're using demo data
        if (window.demoManager && !window.demoManager.isDemoMode()) {
          listLogger.info('List page: Enabling demo mode due to aborted request');
          window.demoManager.enableDemoMode();
        }
      }
    });

    // Handle HTMX response errors
    document.addEventListener('htmx:responseError', function(event) {
      if (event.detail.target.id === 'dataList') {
        listLogger.info('List page: HTMX response error, keeping demo data');
        
        const spinner = document.getElementById('spinner');
        if (spinner) {
          spinner.classList.add('content-loaded');
        }
        
        document.body.classList.remove('loading-active');
        
        // Show demo mode indicator since we're using demo data
        if (window.demoManager && !window.demoManager.isDemoMode()) {
          listLogger.info('List page: Enabling demo mode due to response error');
          window.demoManager.enableDemoMode();
        }
      }
    });
  </script>
</body>
</html>
