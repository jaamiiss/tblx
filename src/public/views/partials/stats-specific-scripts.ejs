<!-- Page-Specific Scripts for Stats Layout -->
<script>
  // ========================================
  // SCATTER CHART FILTER CONFIGURATION
  // ========================================
  
  // Global filter configuration
  window.ScatterChartFilters = {
    dataSource: [
      { value: 'all', label: 'All Data' },
      { value: 'v1', label: 'V1 Only' },
      { value: 'v2', label: 'V2 Only' }
    ],
    status: [
      { value: 'all', label: 'All Statuses' },
      { value: 'deceased', label: 'Deceased' },
      { value: 'active', label: 'Active' },
      { value: 'incarcerated', label: 'Incarcerated' },
      { value: 'redacted', label: 'Redacted' },
      { value: 'unknown', label: 'Unknown' },
      { value: 'captured', label: 'Captured' }
    ]
  };

  // Function to setup scatter chart filters
  function setupScatterChartFilters() {
    const dataFilter = document.getElementById('dataFilter');
    const statusFilter = document.getElementById('statusFilter');
    
    console.log('Setting up scatter chart filters:', { dataFilter, statusFilter });
    console.log('StatsPageChartsManager available:', !!window.statsPageCharts);
    console.log('ScatterChart available:', !!(window.statsPageCharts && window.statsPageCharts.scatterChart));
    
    // Check if scatterChart is available before proceeding
    if (!window.statsPageCharts || !window.statsPageCharts.scatterChart) {
      console.error('StatsPageChartsManager or scatterChart not available for filter setup');
      console.log('Available properties:', window.statsPageCharts ? Object.keys(window.statsPageCharts) : 'statsPageCharts not found');
      return;
    }
    
    // Only add event listeners if they don't already exist and elements are found
    if (dataFilter && !dataFilter.hasAttribute('data-listeners-added')) {
      dataFilter.setAttribute('data-listeners-added', 'true');
      
      dataFilter.addEventListener('change', function() {
        console.log('Data filter changed to:', this.value);
        console.log('StatsPageChartsManager available:', !!window.statsPageCharts);
        console.log('ScatterChart available:', !!(window.statsPageCharts && window.statsPageCharts.scatterChart));
        console.log('updateWithCurrentFilters method available:', !!(window.statsPageCharts && window.statsPageCharts.scatterChart && window.statsPageCharts.scatterChart.updateWithCurrentFilters));
        
        if (window.statsPageCharts && window.statsPageCharts.scatterChart) {
          window.statsPageCharts.scatterChart.dataFilter = this.value;
          
          if (typeof window.statsPageCharts.scatterChart.updateWithCurrentFilters === 'function') {
            window.statsPageCharts.scatterChart.updateWithCurrentFilters();
            console.log('updateWithCurrentFilters called successfully');
          } else {
            console.error('updateWithCurrentFilters method not found, falling back to loadData');
            window.statsPageCharts.scatterChart.loadData();
          }
          
          // Also update modal chart if it's open
          const modal = document.getElementById('chartModal');
          if (modal && modal.classList.contains('active')) {
            const modalCanvas = document.querySelector('#chartModal canvas');
            if (modalCanvas) {
              const modalChart = Chart.getChart(modalCanvas);
              if (modalChart) {
                // Update modal chart with new data
                const newData = window.statsPageCharts.scatterChart.prepareChartData(window.statsPageCharts.scatterChart.data);
                modalChart.data = newData;
                modalChart.update();
              }
            }
          }
        } else {
          console.error('StatsPageChartsManager or scatterChart not available');
        }
      });
      console.log('Data filter event listener added');
    } else if (!dataFilter) {
      console.warn('Data filter element not found');
    }
    
    if (statusFilter && !statusFilter.hasAttribute('data-listeners-added')) {
      statusFilter.setAttribute('data-listeners-added', 'true');
      
      statusFilter.addEventListener('change', function() {
        console.log('Status filter changed to:', this.value);
        console.log('StatsPageChartsManager available:', !!window.statsPageCharts);
        console.log('ScatterChart available:', !!(window.statsPageCharts && window.statsPageCharts.scatterChart));
        console.log('updateWithCurrentFilters method available:', !!(window.statsPageCharts && window.statsPageCharts.scatterChart && window.statsPageCharts.scatterChart.updateWithCurrentFilters));
        
        if (window.statsPageCharts && window.statsPageCharts.scatterChart) {
          window.statsPageCharts.scatterChart.statusFilter = this.value;
          
          if (typeof window.statsPageCharts.scatterChart.updateWithCurrentFilters === 'function') {
            window.statsPageCharts.scatterChart.updateWithCurrentFilters();
            console.log('updateWithCurrentFilters called successfully');
          } else {
            console.error('updateWithCurrentFilters method not found, falling back to loadData');
            window.statsPageCharts.scatterChart.loadData();
          }
          
          // Also update modal chart if it's open
          const modal = document.getElementById('chartModal');
          if (modal && modal.classList.contains('active')) {
            const modalCanvas = document.querySelector('#chartModal canvas');
            if (modalCanvas) {
              const modalChart = Chart.getChart(modalCanvas);
              if (modalChart) {
                // Update modal chart with new data
                const newData = window.statsPageCharts.scatterChart.prepareChartData(window.statsPageCharts.scatterChart.data);
                modalChart.data = newData;
                modalChart.update();
              }
            }
          }
        } else {
          console.error('StatsPageChartsManager or scatterChart not available');
        }
      });
      console.log('Status filter event listener added');
    } else if (!statusFilter) {
      console.warn('Status filter element not found');
    }
  }

  // ========================================
  // MODAL FUNCTIONS
  // ========================================
  
  // Make modal functions globally accessible
  window.closeChartModal = function() {
    // Use the proper cleanup method from stats page charts manager
    if (window.statsPageCharts && window.statsPageCharts.closeModal) {
      window.statsPageCharts.closeModal();
    } else {
      // Fallback to basic close if manager not available
      const modal = document.getElementById('chartModal');
      if (modal) {
        modal.classList.remove('active');
        document.body.classList.remove('chart-modal-open');
        document.body.style.overflow = '';
      }
    }
  };

  window.openChartModal = function(chartType) {
    const modal = document.getElementById('chartModal');
    if (modal) {
      modal.classList.add('active');
      document.body.classList.add('chart-modal-open');
      document.body.style.overflow = 'hidden';
      
      // Update modal content based on chart type
      const modalTitle = document.getElementById('modalChartTitle');
      if (modalTitle) {
        modalTitle.textContent = `${chartType.charAt(0).toUpperCase() + chartType.slice(1)} Chart - Expanded View`;
      }
    }
  };

  // Close modal when clicking outside
  document.addEventListener('click', function(event) {
    const modal = document.getElementById('chartModal');
    if (modal && event.target === modal) {
      window.closeChartModal();
    }
  });

  // Close modal with Escape key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      window.closeChartModal();
    }
  });

  // ========================================
  // DEMO DATA FUNCTIONS
  // ========================================
  
  function loadStatsCardsDummyData() {
    console.log('Stats cards: Loading dummy data...');
    const statsCards = document.getElementById('statsCards');
    if (statsCards) {
      // Simple dummy data rendering
      statsCards.innerHTML = `
        <div class="stats-cards-container" itemscope itemtype="https://schema.org/DataCatalog">
          <div class="status-cards-grid">
            <div class="stat-card deceased" 
                 onclick="window.location.href='/list/deceased'"
                 itemscope 
                 itemtype="https://schema.org/Dataset"
                 itemprop="dataset">
              <div class="stat-number" itemprop="value">45</div>
              <div class="stat-label" itemprop="name">Deceased</div>
              <div class="stat-percentage" itemprop="description">22.4%</div>
            </div>
            <div class="stat-card active" 
                 onclick="window.location.href='/list/active'"
                 itemscope 
                 itemtype="https://schema.org/Dataset"
                 itemprop="dataset">
              <div class="stat-number" itemprop="value">32</div>
              <div class="stat-label" itemprop="name">Active</div>
              <div class="stat-percentage" itemprop="description">15.9%</div>
            </div>
            <div class="stat-card incarcerated" 
                 onclick="window.location.href='/list/incarcerated'"
                 itemscope 
                 itemtype="https://schema.org/Dataset"
                 itemprop="dataset">
              <div class="stat-number" itemprop="value">28</div>
              <div class="stat-label" itemprop="name">Incarcerated</div>
              <div class="stat-percentage" itemprop="description">13.9%</div>
            </div>
            <div class="stat-card redacted" 
                 onclick="window.location.href='/list/redacted'"
                 itemscope 
                 itemtype="https://schema.org/Dataset"
                 itemprop="dataset">
              <div class="stat-number" itemprop="value">15</div>
              <div class="stat-label" itemprop="name">Redacted</div>
              <div class="stat-percentage" itemprop="description">7.5%</div>
            </div>
            <div class="stat-card unknown" 
                 onclick="window.location.href='/list/unknown'"
                 itemscope 
                 itemtype="https://schema.org/Dataset"
                 itemprop="dataset">
              <div class="stat-number" itemprop="value">8</div>
              <div class="stat-label" itemprop="name">Unknown</div>
              <div class="stat-percentage" itemprop="description">4.0%</div>
            </div>
            <div class="stat-card captured" 
                 onclick="window.location.href='/list/captured'"
                 itemscope 
                 itemtype="https://schema.org/Dataset"
                 itemprop="dataset">
              <div class="stat-number" itemprop="value">12</div>
              <div class="stat-label" itemprop="name">Captured</div>
              <div class="stat-percentage" itemprop="description">6.0%</div>
            </div>
          </div>
          
          <!-- Total Card -->
          <div class="total-card-container">
            <div class="stat-card total" 
                 onclick="window.location.href='/list'"
                 itemscope 
                 itemtype="https://schema.org/Dataset"
                 itemprop="dataset">
              <div class="stat-number" itemprop="value">201</div>
              <div class="stat-label" itemprop="name">Total V1</div>
              <div class="stat-percentage" itemprop="description">100%</div>
            </div>
          </div>
        </div>
      `;
    }
  }

  function showQuotaExceededMessage() {
    console.log('Stats: Showing quota exceeded message');
    // Simple alert for now
    alert('API quota exceeded. Please try again later or contact support.');
  }

  function loadDummyDataManually() {
    console.log('Stats: Loading dummy data manually');
    loadStatsCardsDummyData();
    
    // Disable demo mode
    if (window.demoManager) {
      window.demoManager.disableDemoMode();
    }
  }

  // ========================================
  // HTMX HANDLERS - HYBRID APPROACH
  // ========================================
  
  // Handle HTMX JSON responses
  document.addEventListener('htmx:afterRequest', function(event) {
    const path = event.detail.pathInfo.requestPath;
    
    // Handle stats cards JSON response
    if (path.includes('/stats/cards')) {
      console.log('Stats cards: Processing JSON response...');
      
      if (event.detail.successful && event.detail.xhr.responseText) {
        try {
          const data = JSON.parse(event.detail.xhr.responseText);
          renderStatsCards(data);
          console.log('Stats cards: Successfully rendered from JSON data');
        } catch (e) {
          console.error('Stats cards: Failed to parse JSON response:', e);
          loadStatsCardsDummyData(); // Fallback to dummy data
        }
      } else {
        console.warn('Stats cards: Request failed, loading dummy data');
        loadStatsCardsDummyData(); // Fallback to dummy data
      }
    }
    
    // Handle chart JSON responses
    if (path.includes('/stats/chart/')) {
      const chartType = path.split('/stats/chart/')[1];
      console.log(`Chart ${chartType}: Processing JSON response...`);
      
      if (event.detail.successful && event.detail.xhr.responseText) {
        try {
          const data = JSON.parse(event.detail.xhr.responseText);
          createChart(chartType, data);
          console.log(`Chart ${chartType}: Successfully created from JSON data`);
        } catch (e) {
          console.error(`Chart ${chartType}: Failed to parse JSON response:`, e);
        }
      } else {
        console.warn(`Chart ${chartType}: Request failed`);
      }
    }
  });

  // Function to create chart from JSON data
  function createChart(chartType, data) {
    const chartId = `${chartType}Chart`;
    const canvas = document.getElementById(chartId);
    if (!canvas) return;
    
    // Destroy existing chart if any
    if (window[chartId] && window[chartId].destroy) {
      window[chartId].destroy();
    }
    
    // Create new chart based on type
    switch (chartType) {
      case 'pie':
        if (window.PieChart) {
          window[chartId] = new PieChart();
          window[chartId].createChart(data);
        }
        break;
      case 'bar':
        if (window.BarChart) {
          window[chartId] = new BarChart();
          window[chartId].createChart(data);
        }
        break;
      case 'scatter':
        if (window.ScatterChart) {
          window[chartId] = new ScatterChart();
          window[chartId].createChart(data);
        }
        break;
    }
  }

  // Function to render stats cards from JSON data
  function renderStatsCards(data) {
    const statsCards = document.getElementById('statsCards');
    if (!statsCards) return;
    
    const { counts, percentages, v1Total } = data;
    
    statsCards.innerHTML = `
      <div class="stats-cards-container" itemscope itemtype="https://schema.org/DataCatalog">
        <div class="status-cards-grid">
          <div class="stat-card deceased" 
               onclick="window.location.href='/list/deceased'"
               itemscope 
               itemtype="https://schema.org/Dataset"
               itemprop="dataset">
            <div class="stat-number" itemprop="value">${counts.deceased}</div>
            <div class="stat-label" itemprop="name">Deceased</div>
            <div class="stat-percentage" itemprop="description">${percentages.deceased}%</div>
          </div>
          <div class="stat-card active" 
               onclick="window.location.href='/list/active'"
               itemscope 
               itemtype="https://schema.org/Dataset"
               itemprop="dataset">
            <div class="stat-number" itemprop="value">${counts.active}</div>
            <div class="stat-label" itemprop="name">Active</div>
            <div class="stat-percentage" itemprop="description">${percentages.active}%</div>
          </div>
          <div class="stat-card incarcerated" 
               onclick="window.location.href='/list/incarcerated'"
               itemscope 
               itemtype="https://schema.org/Dataset"
               itemprop="dataset">
            <div class="stat-number" itemprop="value">${counts.incarcerated}</div>
            <div class="stat-label" itemprop="name">Incarcerated</div>
            <div class="stat-percentage" itemprop="description">${percentages.incarcerated}%</div>
          </div>
          <div class="stat-card redacted" 
               onclick="window.location.href='/list/redacted'"
               itemscope 
               itemtype="https://schema.org/Dataset"
               itemprop="dataset">
            <div class="stat-number" itemprop="value">${counts.redacted}</div>
            <div class="stat-label" itemprop="name">Redacted</div>
            <div class="stat-percentage" itemprop="description">${percentages.redacted}%</div>
          </div>
          <div class="stat-card unknown" 
               onclick="window.location.href='/list/unknown'"
               itemscope 
               itemtype="https://schema.org/Dataset"
               itemprop="dataset">
            <div class="stat-number" itemprop="value">${counts.unknown}</div>
            <div class="stat-label" itemprop="name">Unknown</div>
            <div class="stat-percentage" itemprop="description">${percentages.unknown}%</div>
          </div>
          <div class="stat-card captured" 
               onclick="window.location.href='/list/captured'"
               itemscope 
               itemtype="https://schema.org/Dataset"
               itemprop="dataset">
            <div class="stat-number" itemprop="value">${counts.captured}</div>
            <div class="stat-label" itemprop="name">Captured</div>
            <div class="stat-percentage" itemprop="description">${percentages.captured}%</div>
          </div>
        </div>
        
        <!-- Total Card -->
        <div class="total-card-container">
          <div class="stat-card total" 
               onclick="window.location.href='/list'"
               itemscope 
               itemtype="https://schema.org/Dataset"
               itemprop="dataset">
            <div class="stat-number" itemprop="value">${v1Total}</div>
            <div class="stat-label" itemprop="name">Total V1</div>
            <div class="stat-percentage" itemprop="description">100%</div>
          </div>
        </div>
      </div>
    `;
  }

  // ========================================
  // CHART INITIALIZATION
  // ========================================
  // INITIALIZATION
  // ========================================
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Stats: DOMContentLoaded fired');
    console.log('Stats: window.statsPageCharts available:', !!window.statsPageCharts);
    console.log('Stats: window.StatsPageChartsManager available:', !!window.StatsPageChartsManager);
    
    // Wait for StatsPageChartsManager to be available
    const waitForStatsPageCharts = () => {
      if (window.statsPageCharts) {
        console.log('Stats: statsPageCharts found, checking scatterChart...');
        
        // Wait for scatterChart to be available with timeout
        let retryCount = 0;
        const maxRetries = 20; // 10 seconds total (20 * 500ms)
        
        const waitForScatterChart = () => {
          if (window.statsPageCharts && window.statsPageCharts.scatterChart) {
            console.log('Stats: ScatterChart is available, setting up filters...');
            setupScatterChartFilters();
          } else if (retryCount < maxRetries) {
            retryCount++;
            console.log(`Stats: ScatterChart not ready yet, retry ${retryCount}/${maxRetries}...`);
            console.log('Stats: statsPageCharts.scatterChart:', window.statsPageCharts ? window.statsPageCharts.scatterChart : 'statsPageCharts not found');
            setTimeout(waitForScatterChart, 500);
          } else {
            console.error('Stats: ScatterChart not available after maximum retries, giving up');
            console.log('Stats: Final statsPageCharts state:', window.statsPageCharts ? Object.keys(window.statsPageCharts) : 'not found');
          }
        };
        
        // Start waiting for scatterChart
        waitForScatterChart();
      } else {
        console.log('Stats: statsPageCharts not ready yet, retrying in 500ms...');
        setTimeout(waitForStatsPageCharts, 500);
      }
    };
    
    // Start waiting for statsPageCharts
    setTimeout(waitForStatsPageCharts, 100);
  });
</script>