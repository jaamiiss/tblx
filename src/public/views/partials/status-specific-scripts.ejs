<!-- Page-Specific Scripts for Status Layout -->
<script>
  // ========================================
  // STATUS-SPECIFIC DEMO DATA HANDLING
  // ========================================
  document.addEventListener('loadPageDemoData', function(event) {
    if (event.detail.pageType === 'status') {
      console.log('Status: Loading demo data for status page');
      loadStatusDemoData();
    }
  });

  function loadStatusDemoData() {
    const currentStatus = '<%= status || "unknown" %>';
    const pageId = `status-${currentStatus}`;
    
    // Use dummy data directly instead of making network requests
    console.log(`Demo Manager: Loading dummy data for status ${currentStatus}`);
    
    if (window.demoManager) {
      // Get dummy data from the server's dummy data endpoint
      fetch('/dummy-data/v1')
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
          return response.json();
        })
        .then(allItems => {
          // Filter dummy data by status
          const filteredItems = allItems.filter(item => 
            item.status && item.status.toLowerCase() === currentStatus.toLowerCase()
          );
          
          console.log(`Demo Manager: Loaded dummy data for ${currentStatus}:`, filteredItems.length, 'items');
          
          // Render the dummy data
          if (window.renderStatusData) {
            window.renderStatusData(filteredItems, 'statusItems');
          }
          
          // Enable demo mode and show banner when demo data is successfully loaded
          if (window.demoManager && !window.demoManager.isDemoMode()) {
            console.log('Status page: Enabling demo mode after successful demo data load');
            window.demoManager.enableDemoMode();
          }
        })
        .catch(error => {
          console.error('Demo Manager: Failed to load dummy data:', error);
          // Fallback to empty state
          const statusItems = document.getElementById('statusItems');
          if (statusItems) {
            statusItems.innerHTML = '<div class="no-data">Demo data not available</div>';
          }
        });
    }
  }

  // ========================================
  // STATUS-SPECIFIC RENDER FUNCTION
  // ========================================
  window.renderStatusData = function(data, containerId) {
    console.log(`Render Status Data: Rendering ${data.length} items for ${containerId}`);
    
    const container = document.getElementById(containerId);
    if (!container) {
      console.log(`Render Status Data: Container ${containerId} not found`);
      return;
    }
    
    if (!data || data.length === 0) {
      console.log(`Render Status Data: No items to render for ${containerId}`);
      container.innerHTML = '<p style="color: #666; font-style: italic;">No items found</p>';
      return;
    }
    
    // ItemRenderer should always be available since we include it
    if (!window.ItemRenderer || !window.ItemRenderer.renderItem) {
      console.error(`Render Status Data: ItemRenderer not available! This should not happen.`);
      container.innerHTML = '<p style="color: #FE0000;">Rendering error: ItemRenderer not loaded</p>';
      return;
    }
    
    console.log(`Render Status Data: Using ItemRenderer for semantic HTML`);
    
    // Sort items by V1 number
    const sortedItems = data.sort((a, b) => (a.v1 || 0) - (b.v1 || 0));
    
    // Use document fragment for better performance
    const fragment = document.createDocumentFragment();
    
    sortedItems.forEach((item, index) => {
      // Use ItemRenderer for consistent semantic HTML
      const itemHTML = window.ItemRenderer.renderItem(item, {
        showV1: true,
        showV2: false,
        useV2ForNumber: false,
        includeLegendWrapper: true
      });
      
      // Create a temporary div to parse the HTML
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = itemHTML;
      fragment.appendChild(tempDiv.firstElementChild);
    });
    
    // Clear container and append fragment
    container.innerHTML = '';
    container.appendChild(fragment);
    
    console.log(`Render Status Data: Rendered ${sortedItems.length} items using ItemRenderer`);
  };

  // ========================================
  // STATUS-SPECIFIC HTMX HANDLERS
  // ========================================
  document.addEventListener('htmx:afterRequest', function(event) {
    // Check if this is a successful status data request
    if (event.detail.successful && event.detail.pathInfo.requestPath.includes('/status/')) {
      const status = event.detail.pathInfo.requestPath.split('/status/')[1];
      
      // Parse JSON response and render with ItemRenderer
      try {
        const data = JSON.parse(event.detail.xhr.responseText);
        if (window.renderStatusData) {
          window.renderStatusData(data, 'statusItems');
          console.log(`Status page: Rendered ${data.length} items for ${status}`);
        } else {
          console.error('Status page: renderStatusData function not available');
        }
      } catch (e) {
        console.error('Status page: Failed to parse JSON response:', e);
      }
      
      if (status && window.demoManager) {
        console.log(`Status page: Live data loaded for ${status}`);
        window.demoManager.onLiveDataLoaded(`status-${status}`, 'statusItems');
      }
    }
  });
</script>

