<!-- Enhanced Common Scripts for All Layouts -->
<script>
  // ========================================
  // ENHANCED COMMON INITIALIZATION
  // ========================================
  
  // Global configuration for all layouts
  window.LayoutConfig = {
    cacheEnabled: true,
    cacheMaxAge: 5 * 60 * 1000, // 5 minutes
    spinnerTimeout: 100,
    demoModeCheckDelay: 2000
  };

  // ========================================
  // CLIENT-SIDE CACHING SYSTEM
  // ========================================
  window.clientDataCache = {
    cache: new Map(),
    maxAge: window.LayoutConfig.cacheMaxAge,
    
    set(key, data) {
      this.cache.set(key, {
        data: data,
        timestamp: Date.now()
      });
      console.log(`Client cache: Stored data for ${key}`);
    },
    
    get(key) {
      const cached = this.cache.get(key);
      if (!cached) return null;
      
      const age = Date.now() - cached.timestamp;
      if (age > this.maxAge) {
        this.cache.delete(key);
        console.log(`Client cache: Expired data for ${key}`);
        return null;
      }
      
      console.log(`Client cache: Hit for ${key}`);
      return cached.data;
    },
    
    has(key) {
      return this.get(key) !== null;
    },
    
    clear() {
      this.cache.clear();
      console.log('Client cache: Cleared all data');
    }
  };

  // ========================================
  // DEMO MANAGER INTEGRATION
  // ========================================
  function initializeDemoManager() {
    if (typeof initDemoManager === 'function') {
      console.log('Common Scripts: Initializing demo manager...');
      initDemoManager();
    }
  }

  function setupDemoEventListeners() {
    // Listen for demo mode changes
    window.addEventListener('demoModeChanged', function(event) {
      if (event.detail.demoMode && window.demoManager) {
        console.log('Common Scripts: Demo mode changed, triggering page-specific demo data load');
        // Dispatch custom event for page-specific handling
        window.dispatchEvent(new CustomEvent('loadPageDemoData', { 
          detail: { pageType: getCurrentPageType() } 
        }));
      }
    });

    // Listen for demo button show event
    window.addEventListener('showDemoButton', function(event) {
      if (event.detail.show) {
        console.log('Common Scripts: Showing quota exceeded message');
        showQuotaExceededMessage();
      }
    });
  }

  function checkInitialDemoMode() {
    if (window.demoManager && window.demoManager.isDemoMode() && !window.demoManager.hasCurrentPageDemoData()) {
      console.log('Common Scripts: Demo mode already enabled, loading page-specific demo data');
      window.dispatchEvent(new CustomEvent('loadPageDemoData', { 
        detail: { pageType: getCurrentPageType() } 
      }));
    }
  }

  // ========================================
  // STRING SCHEMA INTEGRATION
  // ========================================
  function updatePageStrings() {
    if (!window.StringSchema) return;
    
    requestAnimationFrame(function() {
      // Update main title
      const mainTitle = document.getElementById('main-title');
      if (mainTitle) {
        const pageType = getCurrentPageType();
        const newTitle = window.StringSchema.getPageTitle(pageType);
        if (newTitle !== mainTitle.textContent) {
          mainTitle.textContent = newTitle;
        }
      }

      // Update spinner text
      const spinner = document.getElementById('spinner');
      if (spinner) {
        spinner.textContent = window.StringSchema.getLoadingMessage('items');
      }
      
      // Update demo button text
      const demoButton = document.querySelector('#demo-button-container button');
      if (demoButton) {
        demoButton.textContent = window.StringSchema.getButtonLabel('loadDemo');
      }
    });
  }

  // ========================================
  // UTILITY FUNCTIONS
  // ========================================
  function getCurrentPageType() {
    const path = window.location.pathname;
    if (path.includes('/stats')) return 'stats';
    if (path.includes('/status')) return 'status';
    if (path.includes('/list')) return 'list';
    return 'unknown';
  }

  function showQuotaExceededMessage() {
    const dataContainer = document.getElementById('dataList') || 
                         document.getElementById('statusItems') || 
                         document.getElementById('statsCards');
    const spinner = document.getElementById('spinner') || 
                   document.getElementById('status-loading-spinner') ||
                   document.getElementById('stats-loading-spinner');
    const demoButtonContainer = document.getElementById('demo-button-container');
    
    // Hide loading spinner
    if (spinner) {
      spinner.style.display = 'none';
    }
    
    // Show demo button
    if (demoButtonContainer) {
      demoButtonContainer.style.display = 'block';
    }
    
    if (dataContainer && window.QuotaMessageHelper) {
      dataContainer.innerHTML = window.QuotaMessageHelper.generateGeneral();
    }
  }

  function loadDummyDataManually() {
    console.log('Common Scripts: Manual demo mode activation');
    
    // Show loading state on button
    const button = document.querySelector('#demo-button-container button');
    if (button && window.demoManager) {
      window.demoManager.setButtonLoading(button, true);
    }
    
    // Enable demo mode
    if (window.demoManager) {
      window.demoManager.enableDemoMode();
    }
    
    // Hide demo button after a short delay
    setTimeout(() => {
      const demoButtonContainer = document.getElementById('demo-button-container');
      if (demoButtonContainer) {
        demoButtonContainer.style.display = 'none';
      }
    }, 1000);
  }

  // ========================================
  // COMMON HTMX EVENT HANDLERS
  // ========================================
  function setupCommonHTMXHandlers() {
    // Cache management for HTMX requests
    document.addEventListener('htmx:beforeRequest', function(event) {
      const url = event.detail.pathInfo.requestPath;
      const cacheKey = url.replace('/', '');
      
      // Check if we have this data cached (only for list pages)
      if (getCurrentPageType() === 'list' && window.clientDataCache.has(cacheKey)) {
        console.log(`HTMX: Using cached data for ${cacheKey}, skipping request`);
        event.preventDefault();
        
        // Use cached data to render
        const cachedData = window.clientDataCache.get(cacheKey);
        const dataList = document.getElementById('dataList');
        if (dataList && window.renderListData) {
          window.renderListData(cachedData, 'dataList');
        }
        return;
      }
      
      console.log(`HTMX: Cache miss for ${cacheKey}, proceeding with request`);
    });

    // Handle successful HTMX requests
    document.addEventListener('htmx:afterRequest', function(event) {
      if (!event.detail.successful) return;
      
      const pageType = getCurrentPageType();
      const target = event.detail.target;
      
      // Cache successful responses (list pages only)
      if (pageType === 'list' && target.id === 'dataList') {
        const url = event.detail.pathInfo.requestPath;
        const cacheKey = url.replace('/', '');
        
        try {
          const responseData = JSON.parse(event.detail.xhr.responseText);
          window.clientDataCache.set(cacheKey, responseData);
          console.log(`HTMX: Cached response data for ${cacheKey}`);
        } catch (e) {
          console.log(`HTMX: Could not cache response for ${cacheKey} (not JSON)`);
        }
      }
      
      // Handle live data loading detection
      handleLiveDataLoading(event, pageType);
      
      // Hide spinner after successful request
      setTimeout(() => {
        const spinner = document.getElementById('spinner') || 
                       document.getElementById('status-loading-spinner') ||
                       document.getElementById('stats-loading-spinner');
        if (spinner) {
          spinner.classList.add('content-loaded');
        }
        document.body.classList.remove('loading-active');
      }, window.LayoutConfig.spinnerTimeout);
    });

    // Hide spinner after HTMX content swap
    document.addEventListener('htmx:afterSwap', function(event) {
      const spinner = document.getElementById('spinner') || 
                     document.getElementById('status-loading-spinner') ||
                     document.getElementById('stats-loading-spinner');
      if (spinner) {
        spinner.classList.add('content-loaded');
      }
      document.body.classList.remove('loading-active');
    });
  }

  function handleLiveDataLoading(event, pageType) {
    const path = event.detail.pathInfo.requestPath;
    
    // Detect successful live data loading
    let isLiveData = false;
    let dataType = '';
    
    if (pageType === 'list' && (path.includes('/version1') || path.includes('/version2'))) {
      isLiveData = true;
      dataType = path.includes('/version1') ? 'v1' : 'v2';
    } else if (pageType === 'status' && path.includes('/status/')) {
      isLiveData = true;
      dataType = path.split('/status/')[1];
    } else if (pageType === 'stats' && path.includes('/stats/cards')) {
      isLiveData = true;
      dataType = 'cards';
    }
    
    if (isLiveData && window.demoManager) {
      console.log(`${pageType} page: Live data loaded for ${dataType}`);
      const targetId = event.detail.target.id;
      window.demoManager.onLiveDataLoaded(`${pageType}-${dataType}`, targetId);
    }
  }

  // ========================================
  // INITIALIZATION
  // ========================================
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Common Scripts: Initializing enhanced common functionality...');
    
    // Initialize core systems
    initializeDemoManager();
    setupDemoEventListeners();
    setupCommonHTMXHandlers();
    
    // Update page strings
    updatePageStrings();
    
    // Check initial demo mode
    setTimeout(checkInitialDemoMode, window.LayoutConfig.demoModeCheckDelay);
    
    // Hide spinner if content is already loaded
    setTimeout(() => {
      const dataContainer = document.getElementById('dataList') || 
                           document.getElementById('statusItems') || 
                           document.getElementById('statsCards');
      
      // Check if container exists and has meaningful content (not just empty divs)
      if (dataContainer && dataContainer.children.length > 0) {
        // Additional check: ensure content is actually rendered (not just empty containers)
        const hasContent = Array.from(dataContainer.children).some(child => {
          return child.textContent.trim().length > 0 || child.querySelector('article');
        });
        
        if (hasContent) {
          const spinner = document.getElementById('spinner') || 
                         document.getElementById('status-loading-spinner') ||
                         document.getElementById('stats-loading-spinner');
          if (spinner) {
            spinner.classList.add('content-loaded');
            console.log('Common Scripts: Hidden spinner - content already loaded');
          }
          document.body.classList.remove('loading-active');
        }
      }
    }, window.LayoutConfig.spinnerTimeout);
    
    console.log('Common Scripts: Enhanced initialization complete');
  });

  // ========================================
  // GLOBAL FUNCTIONS FOR PAGE-SPECIFIC USE
  // ========================================
  window.LayoutUtils = {
    getCurrentPageType,
    showQuotaExceededMessage,
    loadDummyDataManually,
    updatePageStrings
  };
</script>

