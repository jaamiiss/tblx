class ChartUtils{constructor(){this.chartInstances=new Map}destroyChart(e){const t=this.chartInstances.get(e);t&&(t.destroy(),this.chartInstances.delete(e))}createPieChart(e,t,a={}){const r=document.getElementById(e);if(!r)return null;this.destroyChart(e);const n=r.getContext("2d"),s={...{responsive:!0,maintainAspectRatio:!1,animation:{animateRotate:!0,animateScale:!0},plugins:{legend:{display:!1},tooltip:{enabled:!0,...window.ChartColors?window.ChartColors.getTooltipConfig():{backgroundColor:"#ffffff",titleColor:"#000000",bodyColor:"#000000",borderColor:"#FE0000",borderWidth:2,cornerRadius:8,displayColors:!0,padding:20,titleSpacing:10,bodySpacing:8,titleFont:{size:16,weight:"bold",family:"'TBL-2', monospace"},bodyFont:{size:14,family:"'TBL-2', monospace"}},callbacks:{title:function(e){return e[0].label},label:function(e){const t=e.parsed;return` ${t} (${(t/e.dataset.data.reduce((e,t)=>e+t,0)*100).toFixed(1)}%)`},labelColor:function(e){const t=e.dataset.backgroundColor[e.dataIndex]||e.dataset.backgroundColor;return{borderColor:t,backgroundColor:t,borderWidth:0,borderRadius:6,width:12,height:12}}}}}},...a},o=new Chart(n,{type:"pie",data:t,options:s});return this.chartInstances.set(e,o),o}createBarChart(e,t,a={}){const r=document.getElementById(e);if(!r)return null;this.destroyChart(e);const n=r.getContext("2d"),s={responsive:!0,maintainAspectRatio:!1,scales:{y:{beginAtZero:!0}},plugins:{legend:{display:!1}},...a},o=new Chart(n,{type:"bar",data:t,options:s});return this.chartInstances.set(e,o),o}createScatterChart(e,t,a={}){const r=document.getElementById(e);if(!r)return null;this.destroyChart(e);const n=r.getContext("2d"),s={responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1},tooltip:{backgroundColor:"#ffffff",titleColor:"#000000",bodyColor:"#000000",borderColor:"#FE0000",borderWidth:1,cornerRadius:8,padding:18,displayColors:!0,titleFont:{size:14,weight:"bold",family:"'TBL-2', monospace"},bodyFont:{size:12,family:"'TBL-2', monospace"}}},scales:{x:{title:{display:!1}},y:{title:{display:!1}}}},o={...s,...a,plugins:{...s.plugins,...a.plugins,tooltip:{...s.plugins.tooltip,...a.plugins?.tooltip||{},callbacks:{...s.plugins.tooltip?.callbacks||{},...a.plugins?.tooltip?.callbacks||{}}}},scales:{...s.scales,...a.scales}};if(o.plugins?.tooltip?.callbacks){o.plugins.tooltip.callbacks}const i=new Chart(n,{type:"scatter",data:t,options:o});return this.chartInstances.set(e,i),i}updateLegend(e,t,a,r){const n=document.getElementById(e);n&&(n.innerHTML="",t.forEach((e,t)=>{const r=document.createElement("div");r.className="legend-item";const s=document.createElement("div");s.className="legend-color",s.style.backgroundColor=a[t];const o=document.createElement("span");o.className="legend-label",o.textContent=e,r.appendChild(s),r.appendChild(o),n.appendChild(r)}))}showChartError(e,t){const a=document.getElementById(e);a&&(a.innerHTML=`\n        <div class="chart-error">\n          <p>${t}</p>\n        </div>\n      `)}destroyAll(){this.chartInstances.forEach((e,t)=>{e.destroy()}),this.chartInstances.clear()}}window.ChartUtils=new ChartUtils,"undefined"!=typeof module&&module.exports&&(module.exports=ChartUtils);class ItemRenderer{static renderItem(e,t={}){const{showV1:a=!0,showV2:r=!1,useV2ForNumber:n=!1,includeLegendWrapper:s=!1,showAppearance:o=!1,showBio:i=!1,showImage:l=!1,showLink:d=!1}=t,c=e.name||"Unknown",u=e.status||"unknown",g=void 0!==e.v1?e.v1:0,m=void 0!==e.v2?e.v2:0,h=e.category||"",p=e.image||"",w=e.link||"",v=e.bio||"",f=e.appearance||[],b=n?m:g,y=this.generateSemanticItemHTML(c,u,b,a,r,g,m,h,o,i,l,d,f,v,p,w);return s?`<div class="${u}">${y}</div>`:y}static generateSemanticItemHTML(e,t,a,r,n,s,o,i,l,d,c,u,g,m,h,p){const w=this.generateGuideHTML(a,r,n,s,o),v=this.generateStatusHTML(e,t);let f="";l&&g.length>0&&(f+=this.generateAppearanceHTML(g)),d&&m&&(f+=this.generateBioHTML(m)),c&&h&&(f+=this.generateImageHTML(h)),u&&p&&(f+=this.generateLinkHTML(p));return`\n      <article class="list-item" \n               id="${`item-${a}`}" \n               role="listitem" \n               aria-label="${`${e}, status: ${t}${i?`, category: ${i}`:""}`}" \n               tabindex="0"\n               itemscope \n               itemtype="https://schema.org/Person"\n               data-item-id="${a}"\n               data-item-status="${t}">\n        <header class="item-header">\n          ${w}\n          ${v}\n        </header>\n        ${f?`<div class="item-content" role="region" aria-label="Additional information">${f}</div>`:""}\n      </article>\n    `}static generateStatusHTML(e,t){return"redacted"===t?'<span class="item-redacted" aria-label="Redacted information" role="img"></span>':`<span><span class="name" itemprop="name">${e}</span><span class="dash" aria-hidden="true">&ndash;</span><span class="status ${t}" aria-label="Status: ${t}" itemprop="description">${t}</span></span>`}static generateGuideHTML(e,t,a,r,n){let s=`#${e}.`,o=`Item number ${e}`;return t&&a?(s=`#${r}/${n}.`,o=`Item numbers V1: ${r}, V2: ${n}`):a&&!t&&(s=`#${n}.`,o=`Item number V2: ${n}`),`<span class="guide" aria-label="${o}">${s}</span>`}static renderItems(e,t={}){return Array.isArray(e)&&0!==e.length?e.map(e=>this.renderItem(e,t)).join(""):'<div class="quota-exceeded-message"><div class="quota-icon">ðŸ“‹</div><div class="quota-title">No Data Available</div><div class="quota-message">No items found to display</div></div>'}static renderItemsInColumns(e,t=2,a={}){if(!Array.isArray(e)||0===e.length)return'<div class="quota-exceeded-message"><div class="quota-icon">ðŸ“‹</div><div class="quota-title">No Data Available</div><div class="quota-message">No items found to display</div></div>';const r=Math.ceil(e.length/t),n=[];for(let a=0;a<t;a++){const t=a*r,s=Math.min(t+r,e.length);n.push(e.slice(t,s))}return n.map(e=>`<div class="column">${e.map(e=>this.renderItem(e,a)).join("")}</div>`).join("")}static generateAppearanceHTML(e){if(!e||0===e.length)return"";return`<div class="item-appearance" role="text" aria-label="Episode appearances">Appearances: ${e.map(e=>`S${e.season}E${e.episode}`).join(", ")}</div>`}static generateBioHTML(e){if(!e)return"";const t=e.length>100?e.substring(0,100)+"...":e;return`<div class="item-bio" role="text" aria-label="Character biography" title="${e}">${t}</div>`}static generateImageHTML(e){return e?`<div class="item-image" role="img" aria-label="Character image"><img src="${e}" alt="Character image" style="width: 20px; height: 20px; border-radius: 3px;"></div>`:""}static generateLinkHTML(e){return e?`<div class="item-link"><a href="${e}" target="_blank" rel="noopener noreferrer" aria-label="External link to character information">ðŸ”—</a></div>`:""}static validateItem(e){return e&&"object"==typeof e&&e.name&&"string"==typeof e.name&&e.status&&"string"==typeof e.status}static filterValidItems(e){return Array.isArray(e)?e.filter(e=>this.validateItem(e)):[]}}window.ItemRenderer=ItemRenderer;class StringSchema{constructor(){this.schema={titles:{home:"The Blacklist",list:"The Blacklist",listV1:"The Blacklist",listV2:"The Blacklist",stats:"Statistics",status:"Status",deceased:"Deceased",active:"Active",incarcerated:"Incarcerated",captured:"Captured",redacted:"Redacted"}}}get(e,t={}){const a=e.split(".");let r=this.schema;for(const t of a){if(!r||"object"!=typeof r||!(t in r))return e;r=r[t]}return"string"==typeof r&&Object.keys(t).length>0?r.replace(/\{(\w+)\}/g,(e,a)=>void 0!==t[a]?t[a]:e):r||e}getListItemRendering(e="unknown",t={}){return this.get(`list.itemRendering.${e}`,t)}getListColumnLayout(e="largeDesktop",t={}){return this.get(`list.columnLayout.${e}`,t)}getLoadingMessage(e="default",t={}){const a={default:"Loading...",chart:"Loading chart...",data:"Loading data...",stats:"Loading statistics..."};return a[e]||a.default}getErrorMessage(e="default",t={}){const a={default:"An error occurred",chart:"Failed to load chart",data:"Failed to load data",stats:"Failed to load statistics",network:"Network error",timeout:"Request timeout"};return a[e]||a.default}getButtonLabel(e="default",t={}){const a={default:"Button",loadDemo:"Load Demo Data",refresh:"Refresh",export:"Export",save:"Save",cancel:"Cancel",submit:"Submit",delete:"Delete",edit:"Edit",view:"View"};return a[e]||a.default}getStatusMessage(e="default",t={}){const a={default:"Status message",quotaExceeded:"Database Quota Exceeded",quotaMessage:"We've reached our database read limit. Please try again later or contact support.",quotaNote:"Demo data is available as a fallback.",demoMode:"Demo Mode Active",liveData:"Live Data Available",offline:"Offline Mode",loading:"Loading...",error:"Error occurred",success:"Success"};return a[e]||a.default}getPageTitle(e="default"){const t={default:"The Blacklist",list:"The Blacklist",stats:"Data Analytics",admin:"Admin Dashboard","the-blacklist":"The Blacklist"};return t[e]||t.default}}window.StringSchema=new StringSchema,"undefined"!=typeof module&&module.exports&&(module.exports=StringSchema),window.QuotaMessageHelper={generateDemoDataError:function(e){return`\n      <div class="demo-data-error">\n        <div class="demo-error-container">\n          <div class="demo-error-icon">\n            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n              <circle cx="12" cy="12" r="10" stroke="#FE0000" stroke-width="2"/>\n              <path d="M12 8v4M12 16h.01" stroke="#FE0000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n            </svg>\n          </div>\n          <div class="demo-error-title">Demo Data Unavailable</div>\n          <div class="demo-error-message">${e}</div>\n          <div class="demo-error-note">Please try refreshing the page or contact support if the issue persists.</div>\n          <div class="demo-error-actions">\n            <button onclick="window.location.reload()" class="demo-error-button primary">\n              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n                <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n                <path d="M21 3v5h-5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n                <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n                <path d="M3 21v-5h5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n              </svg>\n              Refresh Page\n            </button>\n            <button onclick="window.demoManager && window.demoManager.clearDemoMode()" class="demo-error-button secondary">\n              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n                <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n              </svg>\n              Clear Demo Mode\n            </button>\n          </div>\n        </div>\n      </div>\n    `},generateMessage:function(e={}){const t=e.title||"Database Quota Exceeded",a=e.message||"We've reached our database read limit. Please try again later or contact support.",r=e.note||"";return`\n      <div class="quota-exceeded-message">\n        <div class="quota-message-content">\n          <h3>${t}</h3>\n          <p>${a}</p>\n          ${r?`<p class="quota-note">${r}</p>`:""}\n        </div>\n      </div>\n    `},generateChartError:function(e){return this.generateMessage({title:window.StringSchema&&window.StringSchema.getErrorMessage?window.StringSchema.getErrorMessage("chartLoad"):"Chart Error",message:`Unable to load ${e} chart`,note:"This may be due to quota limits or connection issues."})},generateStatusError:function(e){return this.generateMessage({title:window.StringSchema&&window.StringSchema.getErrorMessage?window.StringSchema.getErrorMessage("dataLoad"):"Data Error",message:`Unable to load data for ${e} status`,note:"This may be due to quota limits or connection issues."})},generateListError:function(e){return this.generateMessage({title:window.StringSchema&&window.StringSchema.getErrorMessage?window.StringSchema.getErrorMessage("dataLoad"):"Data Error",message:`Unable to load ${e} list data`,note:"This may be due to quota limits or connection issues."})},generateGeneral:function(){return this.generateMessage()},generateNoData:function(){return this.generateMessage({title:window.StringSchema?window.StringSchema.getErrorMessage("noData"):"No Data Available",message:window.StringSchema?window.StringSchema.getErrorMessage("noItems"):"No items found to display",note:""})},generateInvalidData:function(){return this.generateMessage({title:window.StringSchema?window.StringSchema.getErrorMessage("invalidData"):"Invalid Data",message:window.StringSchema?window.StringSchema.getErrorMessage("missingProperties"):"Items found but missing required properties",note:""})}};