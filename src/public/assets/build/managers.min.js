class LogManager{constructor(){this.debugMode=!1,this.logLevels={ERROR:0,WARN:1,INFO:2,DEBUG:3,VERBOSE:4},this.currentLevel=this.logLevels.INFO,this.logPrefixes={ERROR:"🔴 ERROR",WARN:"🟡 WARN",INFO:"ℹ️ INFO",DEBUG:"🔵 DEBUG",VERBOSE:"⚪ VERBOSE"},this.initializeFromStorage(),this.initializeFromURL(),this.overrideConsoleMethods()}initializeFromStorage(){const e=localStorage.getItem("debugMode"),t=localStorage.getItem("logLevel");"true"===e&&(this.debugMode=!0,this.currentLevel=this.logLevels.DEBUG),t&&void 0!==this.logLevels[t]&&(this.currentLevel=this.logLevels[t])}initializeFromURL(){const e=new URLSearchParams(window.location.search),t=e.get("debug"),o=e.get("logLevel");"true"!==t&&"1"!==t||(this.debugMode=!0,this.currentLevel=this.logLevels.DEBUG,localStorage.setItem("debugMode","true")),o&&this.logLevels[o.toUpperCase()]&&(this.currentLevel=this.logLevels[o.toUpperCase()],localStorage.setItem("logLevel",o.toUpperCase()))}overrideConsoleMethods(){const e={log:console.log,error:console.error,warn:console.warn,info:console.info,debug:console.debug};console.log=(...e)=>{this.log("INFO",...e)},console.error=(...e)=>{this.log("ERROR",...e)},console.warn=(...e)=>{this.log("WARN",...e)},console.info=(...e)=>{this.log("INFO",...e)},console.debug=(...e)=>{this.log("DEBUG",...e)},console._original=e}log(e,...t){const o=this.logLevels[e];if("ERROR"!==e&&o<=this.currentLevel){this.logPrefixes[e];e}}error(...e){this.log("ERROR",...e)}warn(...e){this.log("WARN",...e)}info(...e){this.log("INFO",...e)}debug(...e){this.log("DEBUG",...e)}verbose(...e){this.log("VERBOSE",...e)}setLogLevel(e){void 0!==this.logLevels[e]?(this.currentLevel=this.logLevels[e],localStorage.setItem("logLevel",e),this.info("LogManager: Log level set to",e)):this.error("LogManager: Invalid log level:",e)}setDebugMode(e){this.debugMode=e,e?(this.currentLevel=this.logLevels.DEBUG,localStorage.setItem("debugMode","true")):(this.currentLevel=this.logLevels.INFO,localStorage.removeItem("debugMode")),this.info("LogManager: Debug mode",e?"enabled":"disabled")}getCurrentLevelName(){return Object.keys(this.logLevels).find(e=>this.logLevels[e]===this.currentLevel)}isDebugMode(){return this.debugMode}enableDebugTemporarily(e=3e4){const t=this.currentLevel,o=this.debugMode;this.setDebugMode(!0),this.info("LogManager: Debug mode temporarily enabled for",e/1e3,"seconds"),setTimeout(()=>{this.currentLevel=t,this.debugMode=o,this.info("LogManager: Debug mode restored to previous state")},e)}clear(){}showConfig(){}createModuleLogger(e){return{error:(...t)=>this.log("ERROR",`[${e}]`,...t),warn:(...t)=>this.log("WARN",`[${e}]`,...t),info:(...t)=>this.log("INFO",`[${e}]`,...t),debug:(...t)=>this.log("DEBUG",`[${e}]`,...t),verbose:(...t)=>this.log("VERBOSE",`[${e}]`,...t)}}}window.logManager=new LogManager,window.enableDebug=()=>window.logManager.setDebugMode(!0),window.disableDebug=()=>window.logManager.setDebugMode(!1),window.setLogLevel=e=>window.logManager.setLogLevel(e),window.showLogConfig=()=>window.logManager.showConfig(),window.clearConsole=()=>window.logManager.clear(),window.toggleDebug=()=>{const e=window.logManager.isDebugMode();return window.logManager.setDebugMode(!e),!e};class HTMXManager{constructor(){this.logger=window.logManager?window.logManager.createModuleLogger("HTMXManager"):console,this.requestStates=new Map,this.fallbackPaths=["/version1","/version2","/list","/list/v2","/the-blacklist","/stats/cards","/stats/chart/pie","/stats/chart/bar","/stats/chart/scatter","/status/deceased","/status/active","/status/incarcerated","/status/redacted","/status/unknown","/status/captured"],this.logger.info("HTMX Manager initialized")}init(){this.setupEventListeners(),this.logger.info("HTMX Manager setup complete")}setupEventListeners(){this.logger.debug("Setting up HTMX event listeners"),document.addEventListener("htmx:responseError",e=>{this.logger.info("HTMX Manager: responseError event received"),this.handleHTMXFailure(e,"responseError")}),document.addEventListener("htmx:timeout",e=>{this.logger.info("HTMX Manager: timeout event received"),this.handleHTMXFailure(e,"timeout")}),document.addEventListener("htmx:sendAbort",e=>{this.logger.info("HTMX Manager: sendAbort event received"),this.handleHTMXFailure(e,"sendAbort")}),document.addEventListener("htmx:afterRequest",e=>{this.logger.info("HTMX Manager: afterRequest event received"),this.handleHTMXSuccess(e)}),document.addEventListener("htmx:afterSwap",e=>{this.logger.info("HTMX Manager: afterSwap event received"),this.handleHTMXSwap(e)}),document.addEventListener("htmx:afterRequest",e=>{setTimeout(()=>{this.checkForEmptyResponse(e)},1e3)})}handleHTMXFailure(e,t){const o=e.detail.target,a=e.detail.pathInfo.requestPath,i=`${o.id}_${a}`;this.logger.info(`HTMX ${t} detected for path: ${a}, target: ${o.id}`),"fallback_triggered"!==this.requestStates.get(i)?(this.logger.info(`HTMX ${t} for ${a}, checking if we should fall back to demo data`),this.shouldFallbackToDemo(a)?(this.logger.info(`HTMX Manager: Triggering demo fallback for ${t} on ${a}`),this.requestStates.set(i,"fallback_triggered"),window.demoManager?(this.logger.info(`HTMX Manager: Calling demoManager.handleHTMXFallback(${a})`),window.demoManager.handleHTMXFallback(a)):this.logger.warn("HTMX Manager: demoManager not available"),setTimeout(()=>{this.requestStates.delete(i)},1e4)):this.logger.info(`HTMX Manager: Path ${a} not in fallback paths, skipping demo fallback`)):this.logger.debug(`Fallback already triggered for ${i}, skipping ${t}`)}checkForEmptyResponse(e){const t=e.detail.target,o=e.detail.pathInfo.requestPath,a=`${t.id}_${o}`;"fallback_triggered"!==this.requestStates.get(a)?e.detail.successful||"successful"===this.requestStates.get(a)?this.logger.debug(`HTMX Manager: Request was successful for ${a}, skipping empty response check`):!t||"dataList"!==t.id||t.innerHTML&&""!==t.innerHTML.trim()||(this.logger.info(`HTMX Manager: Empty response detected for ${o}, triggering demo fallback`),this.shouldFallbackToDemo(o)&&window.demoManager&&(this.logger.info(`HTMX Manager: Calling demoManager.handleHTMXFallback(${o}) for empty response`),this.requestStates.set(a,"fallback_triggered"),window.demoManager.handleHTMXFallback(o))):this.logger.debug(`HTMX Manager: Already handled ${a}, skipping empty response check`)}handleHTMXSuccess(e){const t=e.detail.target,o=e.detail.pathInfo.requestPath,a=`${t.id}_${o}`;e.detail.successful&&(this.logger.debug(`HTMX request successful for ${a}`),this.requestStates.set(a,"successful"),window.demoManager&&window.demoManager.hideDemoBanner(),setTimeout(()=>{this.hideSpinners()},50))}handleHTMXSwap(e){this.logger.debug("HTMX content swapped"),setTimeout(()=>{this.hideSpinners()},50)}shouldFallbackToDemo(e){return this.fallbackPaths.some(t=>e.includes(t))}disableHTMXRequests(){if("loading"===document.readyState)return void document.addEventListener("DOMContentLoaded",()=>this.disableHTMXRequests());const e=document.querySelectorAll("[hx-get], [hx-post], [hx-put], [hx-delete]");this.logger.info(`HTMX Manager: Disabling ${e.length} HTMX elements`),e.forEach(e=>{this.storeOriginalAttributes(e),this.removeHTMXAttributes(e),e.setAttribute("data-htmx-disabled","true")}),this.hideSpinners(),this.logger.info(`HTMX Manager: Disabled ${e.length} HTMX elements`)}enableHTMXRequests(){const e=document.querySelectorAll("[data-original-hx-get], [data-original-hx-post], [data-original-hx-put], [data-original-hx-delete]");this.logger.info(`HTMX Manager: Re-enabling ${e.length} HTMX elements`),e.forEach(e=>{this.restoreOriginalAttributes(e),this.removeStoredAttributes(e)}),window.demoManager&&window.demoManager.isDemoMode()||this.showSpinners(),this.logger.info(`HTMX Manager: Re-enabled ${e.length} HTMX elements`),this.triggerLoadRequests()}storeOriginalAttributes(e){e.setAttribute("data-original-hx-get",e.getAttribute("hx-get")||""),e.setAttribute("data-original-hx-post",e.getAttribute("hx-post")||""),e.setAttribute("data-original-hx-put",e.getAttribute("hx-put")||""),e.setAttribute("data-original-hx-delete",e.getAttribute("hx-delete")||""),e.setAttribute("data-original-hx-trigger",e.getAttribute("hx-trigger")||""),e.setAttribute("data-original-hx-indicator",e.getAttribute("hx-indicator")||"")}removeHTMXAttributes(e){e.removeAttribute("hx-get"),e.removeAttribute("hx-post"),e.removeAttribute("hx-put"),e.removeAttribute("hx-delete"),e.removeAttribute("hx-trigger"),e.removeAttribute("hx-indicator")}restoreOriginalAttributes(e){const t=e.getAttribute("data-original-hx-get"),o=e.getAttribute("data-original-hx-post"),a=e.getAttribute("data-original-hx-put"),i=e.getAttribute("data-original-hx-delete"),r=e.getAttribute("data-original-hx-trigger"),s=e.getAttribute("data-original-hx-indicator");t&&e.setAttribute("hx-get",t),o&&e.setAttribute("hx-post",o),a&&e.setAttribute("hx-put",a),i&&e.setAttribute("hx-delete",i),r&&e.setAttribute("hx-trigger",r),s&&e.setAttribute("hx-indicator",s),this.logger.debug(`HTMX Manager: Restored attributes for ${e.id}:`,{hxGet:e.getAttribute("hx-get"),hxTrigger:e.getAttribute("hx-trigger"),hxIndicator:e.getAttribute("hx-indicator")})}removeStoredAttributes(e){e.removeAttribute("data-original-hx-get"),e.removeAttribute("data-original-hx-post"),e.removeAttribute("data-original-hx-put"),e.removeAttribute("data-original-hx-delete"),e.removeAttribute("data-original-hx-trigger"),e.removeAttribute("data-original-hx-indicator"),e.removeAttribute("data-htmx-disabled")}triggerLoadRequests(){document.querySelectorAll('[hx-trigger*="load"]').forEach(e=>{window.htmx&&(window.htmx.trigger(e,"load"),this.logger.debug(`HTMX Manager: Triggered load request for ${e.id}`))})}hideSpinners(){document.querySelectorAll(".htmx-indicator, #spinner, #loading-spinner, #stats-loading-spinner").forEach(e=>{e.style.display="none"})}showSpinners(){document.querySelectorAll(".htmx-indicator, #spinner, #loading-spinner, #stats-loading-spinner").forEach(e=>{e.style.display="block"})}isHTMXDisabled(){return document.querySelectorAll('[data-htmx-disabled="true"]').length>0}getRequestStates(){return Array.from(this.requestStates.entries())}clearRequestStates(){this.requestStates.clear(),this.logger.info("HTMX Manager: Cleared all request states")}}"undefined"!=typeof module&&module.exports?module.exports=HTMXManager:window.HTMXManager=HTMXManager;class DemoManager{constructor(){this.logger=window.logManager?window.logManager.createModuleLogger("DemoManager"):console,this.demoMode="true"===localStorage.getItem("demoMode"),this.cache=new Map,this.logger.info("Demo Manager initialized")}init(){window.htmxManager||(window.htmxManager=new HTMXManager,window.htmxManager.init()),this.demoMode?this.logger.info("Demo mode already enabled, will load demo data if HTMX fails"):this.logger.debug("Demo mode not enabled, letting HTMX handle data loading"),this.demoMode&&this.showDemoDataBanner()}handleHTMXFallback(e){this.logger.info(`Demo Manager: Handling HTMX fallback for ${e}`),this.demoMode||this.enableDemoMode(),this.loadDemoDataForCurrentPage()}loadDemoDataForCurrentPage(){const e=window.location.pathname;if(this.logger.info(`Demo Manager: Loading demo data for current page: ${e}`),e.includes("/list/v2"))this.loadDemoDataForPage("list-v2","/dummy-data/v2","dataList",window.renderListData);else if(e.includes("/list")||e.includes("/the-blacklist"))this.loadDemoDataForPage("list-v1","/dummy-data/v1","dataList",window.renderListData);else if(e.includes("/stats"))this.loadDemoDataForPage("stats-cards","/dummy-data/stats","statsCards",window.renderStatsCards);else if(e.includes("/status/")){const t=e.split("/status/")[1];t&&this.loadDemoDataForPage(`status-${t}`,"/dummy-data/v1","statusItems",window.renderStatusData)}}async loadDemoDataForPage(e,t,o,a){try{this.logger.info(`Demo Manager: Loading demo data for ${e} from ${t}`),this.demoMode&&this.showLoadingIndicator(o);const i=`${e}_${t}`;if(this.cache.has(i)){this.logger.info(`Demo Manager: Using cached demo data for ${e}`);const t=this.cache.get(i);return void this.renderDemoData(t,o,a)}const r=await fetch(t);if(!r.ok)throw new Error(`HTTP ${r.status}: ${r.statusText}`);const s=await r.json();this.cache.set(i,s),this.renderDemoData(s,o,a),this.logger.info(`Demo Manager: Successfully loaded demo data for ${e}`)}catch(t){this.logger.error(`Demo Manager: Failed to load demo data for ${e}:`,t),this.showErrorIndicator(o,t)}}renderDemoData(e,t,o){document.getElementById(t)?("function"==typeof o?(o(e,t),this.logger.info(`Demo Manager: Rendered demo data in ${t}`)):this.logger.error(`Demo Manager: Render function not available for ${t}`),this.hideLoadingIndicator(t),this.demoMode&&this.showDemoDataBanner()):this.logger.error(`Demo Manager: Container ${t} not found`)}showLoadingIndicator(e){if(window.spinnerManager)window.spinnerManager.showDemoSpinner(e);else{const e=document.getElementById("spinner")||document.getElementById("loading-spinner");e&&(e.style.display="block")}}hideLoadingIndicator(e){if(window.spinnerManager)window.spinnerManager.hideDemoSpinner(e);else{const e=document.getElementById("spinner")||document.getElementById("loading-spinner");e&&(e.style.display="none")}}showErrorIndicator(e,t){const o=document.getElementById(e);o&&(window.QuotaMessageHelper?o.innerHTML=window.QuotaMessageHelper.generateDemoDataError():o.innerHTML='\n        <div class="demo-error-container">\n          <div class="demo-error-icon">⚠️</div>\n          <div class="demo-error-title">Demo Data Unavailable</div>\n          <div class="demo-error-message">Unable to load demo data. Please check your connection.</div>\n        </div>\n      ',this.hideLoadingIndicator(e))}showDemoDataBanner(){const e=window.location.pathname;let t="Demo data";e.includes("/stats")?t="Charts using demo data":e.includes("/list")?t="List using demo data":e.includes("/status")&&(t="Status using demo data"),window.showDemoBanner?(window.showDemoBanner(t),this.logger.info(`Demo Manager: Demo banner shown with context: ${t}`)):this.logger.warn("Demo Manager: showDemoBanner function not available")}hideDemoBanner(){window.hideDemoBanner?(window.hideDemoBanner(),this.logger.info("Demo Manager: Demo banner hidden")):this.logger.warn("Demo Manager: hideDemoBanner function not available")}enableDemoMode(){this.demoMode=!0,localStorage.setItem("demoMode","true"),this.logger.info("Demo Manager: Demo mode enabled"),window.htmxManager&&window.htmxManager.disableHTMXRequests()}disableDemoMode(){this.demoMode=!1,localStorage.removeItem("demoMode"),this.logger.info("Demo Manager: Demo mode disabled"),window.htmxManager&&window.htmxManager.enableHTMXRequests(),this.hideDemoBanner()}clearDemoMode(){this.disableDemoMode(),window.location.reload()}isDemoMode(){return this.demoMode}isDemoDataLoaded(){window.location.pathname;return["dataList","statusItems","statsCards"].some(e=>{const t=document.getElementById(e);return t&&t.children.length>0})}clearCache(){this.cache.clear(),this.logger.info("Demo Manager: Cache cleared")}getCacheStats(){return{size:this.cache.size,keys:Array.from(this.cache.keys())}}hasCurrentPageDemoData(){const e=window.location.pathname;let t;if(e.includes("/list/v2"))t="list-v2";else if(e.includes("/list")||e.includes("/the-blacklist"))t="list-v1";else if(e.includes("/stats"))t="stats-cards";else if(e.includes("/status/")){t=`status-${e.split("/status/")[1]}`}if(t){const e=`${t}_/dummy-data/${t.includes("list")?t.includes("v2")?"v2":"v1":t.includes("stats")?"stats":"v1"}`;return this.cache.has(e)}return!1}onLiveDataLoaded(e,t){this.logger.info(`Demo Manager: Live data loaded for ${e}`),this.hideDemoBanner(),this.cache.set(`${e}-live`,!0)}checkQuotaStatus(){return this.logger.info("Demo Manager: Checking quota status"),this.logger.info("Demo Manager: Quota status check completed"),{status:"ok",remaining:"unlimited",resetTime:null}}}"undefined"!=typeof module&&module.exports?module.exports=DemoManager:window.DemoManager=DemoManager,window.initDemoManager=function(){return window.demoManager||(window.demoManager=new DemoManager,window.demoManager.init()),window.demoManager};